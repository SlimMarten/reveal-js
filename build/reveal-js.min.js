!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["Reveal-js"]=e():t["Reveal-js"]=e()}(window,function(){return function(t){var e=window.webpackHotUpdateReveal_js;window.webpackHotUpdateReveal_js=function(t,n){!function(t,e){if(!w[t]||!O[t])return;for(var n in O[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(v[n]=e[n]);0==--b&&0===g&&_()}(t,n),e&&e(t,n)};var n,r=!0,o="1989c8174b2a72d18ca2",i=1e4,c={},u=[],f=[];function a(t){var e=E[t];if(!e)return A;var r=function(r){return e.hot.active?(E[r]?-1===E[r].parents.indexOf(t)&&E[r].parents.push(t):(u=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),u=[]),A(r)},o=function(t){return{configurable:!0,enumerable:!0,get:function(){return A[t]},set:function(e){A[t]=e}}};for(var i in A)Object.prototype.hasOwnProperty.call(A,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(t){return"ready"===p&&d("prepare"),g++,A.e(t).then(e,function(t){throw e(),t});function e(){g--,"prepare"===p&&(m[t]||j(t),0===g&&0===b&&_())}},r.t=function(t,e){return 1&e&&(t=r(t)),A.t(t,-2&e)},r}function s(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var r=0;r<t.length;r++)e._acceptedDependencies[t[r]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:S,apply:P,status:function(t){if(!t)return p;l.push(t)},addStatusHandler:function(t){l.push(t)},removeStatusHandler:function(t){var e=l.indexOf(t);e>=0&&l.splice(e,1)},data:c[t]};return n=void 0,e}var l=[],p="idle";function d(t){p=t;for(var e=0;e<l.length;e++)l[e].call(null,t)}var y,v,h,b=0,g=0,m={},O={},w={};function x(t){return+t+""===t?+t:t}function S(t){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=t,d("check"),(e=i,e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=A.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(t){return void n(t)}t(e)}}})).then(function(t){if(!t)return d("idle"),null;O={},m={},w=t.c,h=t.h,d("prepare");var e=new Promise(function(t,e){y={resolve:t,reject:e}});v={};return j(0),"prepare"===p&&0===g&&0===b&&_(),e});var e}function j(t){w[t]?(O[t]=!0,b++,function(t){var e=document.createElement("script");e.charset="utf-8",e.src=A.p+""+t+"."+o+".hot-update.js",document.head.appendChild(e)}(t)):m[t]=!0}function _(){d("ready");var t=y;if(y=null,t)if(r)Promise.resolve().then(function(){return P(r)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&e.push(x(n));t.resolve(e)}}function P(e){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,i,f,a;function s(t){for(var e=[t],n={},r=e.slice().map(function(t){return{chain:[t],id:t}});r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((f=E[i])&&!f.hot._selfAccepted){if(f.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(f.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<f.parents.length;u++){var a=f.parents[u],s=E[a];if(s){if(s.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([a]),moduleId:i,parentId:a};-1===e.indexOf(a)&&(s.hot._acceptedDependencies[i]?(n[a]||(n[a]=[]),l(n[a],[i])):(delete n[a],e.push(a),r.push({chain:c.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}e=e||{};var y={},b=[],g={},m=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var O in v)if(Object.prototype.hasOwnProperty.call(v,O)){var S;a=x(O);var j=!1,_=!1,P=!1,I="";switch((S=v[O]?s(a):{type:"disposed",moduleId:O}).chain&&(I="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":e.onDeclined&&e.onDeclined(S),e.ignoreDeclined||(j=new Error("Aborted because of self decline: "+S.moduleId+I));break;case"declined":e.onDeclined&&e.onDeclined(S),e.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+I));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(S),e.ignoreUnaccepted||(j=new Error("Aborted because "+a+" is not accepted"+I));break;case"accepted":e.onAccepted&&e.onAccepted(S),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(S),P=!0;break;default:throw new Error("Unexception type "+S.type)}if(j)return d("abort"),Promise.reject(j);if(_)for(a in g[a]=v[a],l(b,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,a)&&(y[a]||(y[a]=[]),l(y[a],S.outdatedDependencies[a]));P&&(l(b,[S.moduleId]),g[a]=m)}var T,k=[];for(r=0;r<b.length;r++)a=b[r],E[a]&&E[a].hot._selfAccepted&&k.push({module:a,errorHandler:E[a].hot._selfAccepted});d("dispose"),Object.keys(w).forEach(function(t){!1===w[t]&&function(t){delete installedChunks[t]}(t)});for(var D,M,L=b.slice();L.length>0;)if(a=L.pop(),f=E[a]){var R={},H=f.hot._disposeHandlers;for(i=0;i<H.length;i++)(n=H[i])(R);for(c[a]=R,f.hot.active=!1,delete E[a],delete y[a],i=0;i<f.children.length;i++){var C=E[f.children[i]];C&&((T=C.parents.indexOf(a))>=0&&C.parents.splice(T,1))}}for(a in y)if(Object.prototype.hasOwnProperty.call(y,a)&&(f=E[a]))for(M=y[a],i=0;i<M.length;i++)D=M[i],(T=f.children.indexOf(D))>=0&&f.children.splice(T,1);for(a in d("apply"),o=h,g)Object.prototype.hasOwnProperty.call(g,a)&&(t[a]=g[a]);var N=null;for(a in y)if(Object.prototype.hasOwnProperty.call(y,a)&&(f=E[a])){M=y[a];var F=[];for(r=0;r<M.length;r++)if(D=M[r],n=f.hot._acceptedDependencies[D]){if(-1!==F.indexOf(n))continue;F.push(n)}for(r=0;r<F.length;r++){n=F[r];try{n(M)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:M[r],error:t}),e.ignoreErrored||N||(N=t)}}}for(r=0;r<k.length;r++){var G=k[r];a=G.module,u=[a];try{A(a)}catch(t){if("function"==typeof G.errorHandler)try{G.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:n,originalError:t}),e.ignoreErrored||N||(N=n),N||(N=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:a,error:t}),e.ignoreErrored||N||(N=t)}}return N?(d("fail"),Promise.reject(N)):(d("idle"),new Promise(function(t){t(b)}))}var E={};function A(e){if(E[e])return E[e].exports;var n=E[e]={i:e,l:!1,exports:{},hot:s(e),parents:(f=u,u=[],f),children:[]};return t[e].call(n.exports,n,n.exports,a(e)),n.l=!0,n.exports}return A.m=t,A.c=E,A.d=function(t,e,n){A.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},A.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},A.t=function(t,e){if(1&e&&(t=A(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(A.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)A.d(n,r,function(e){return t[e]}.bind(null,r));return n},A.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return A.d(e,"a",e),e},A.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},A.p="",A.h=function(){return o},a(63)(A.s=63)}([function(t,e){t.exports="object"==typeof window&&window&&window.Math==Math?window:"object"==typeof self&&self&&self.Math==Math?self:Function("return this")()},function(t,e,n){var r=n(12)("wks"),o=n(25),i=n(0).Symbol,c=n(46);t.exports=function(t){return r[t]||(r[t]=c&&i[t]||(c?i:o)("Symbol."+t))}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(0),o=n(20).f,i=n(6),c=n(15),u=n(24),f=n(43),a=n(67);t.exports=function(t,e){var n,s,l,p,d,y=t.target,v=t.global,h=t.stat;if(n=v?r:h?r[y]||u(y,{}):(r[y]||{}).prototype)for(s in e){if(p=e[s],l=t.noTargetGet?(d=o(n,s))&&d.value:n[s],!a(v?s:y+(h?".":"#")+s,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;f(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),c(n,s,p,t)}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(7),o=n(11);t.exports=n(8)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(8),o=n(40),i=n(10),c=n(14),u=Object.defineProperty;e.f=r?u:function(t,e,n){if(i(t),e=c(e,!0),i(n),o)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(64),o=n(23);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(0),o=n(24),i=r["__core-js_shared__"]||o("__core-js_shared__",{});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.0.0",mode:n(13)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=!1},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(0),o=n(6),i=n(2),c=n(24),u=n(42),f=n(16),a=f.get,s=f.enforce,l=String(u).split("toString");n(12)("inspectSource",function(t){return u.call(t)}),(t.exports=function(t,e,n,u){var f=!!u&&!!u.unsafe,a=!!u&&!!u.enumerable,p=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||o(n,"name",e),s(n).source=l.join("string"==typeof e?e:"")),t!==r?(f?!p&&t[e]&&(a=!0):delete t[e],a?t[e]=n:o(t,e,n)):a?t[e]=n:c(e,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&a(this).source||u.call(this)})},function(t,e,n){var r,o,i,c=n(65),u=n(5),f=n(6),a=n(2),s=n(17),l=n(18),p=n(0).WeakMap;if(c){var d=new p,y=d.get,v=d.has,h=d.set;r=function(t,e){return h.call(d,t,e),e},o=function(t){return y.call(d,t)||{}},i=function(t){return v.call(d,t)}}else{var b=s("state");l[b]=!0,r=function(t,e){return f(t,b,e),e},o=function(t){return a(t,b)?t[b]:{}},i=function(t){return a(t,b)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!u(e)||(n=o(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(12)("keys"),o=n(25);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports={}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(8),o=n(21),i=n(11),c=n(9),u=n(14),f=n(2),a=n(40),s=Object.getOwnPropertyDescriptor;e.f=r?s:function(t,e){if(t=c(t),e=u(e,!0),a)try{return s(t,e)}catch(t){}if(f(t,e))return i(!o.f.call(t,e),t[e])}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:r},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(0),o=n(6);t.exports=function(t,e){try{o(r,t,e)}catch(n){r[t]=e}return e}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(44),o=n(29).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){var r=n(19),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(19),o=Math.max,i=Math.min;t.exports=function(t,e){var n=r(t);return n<0?o(n+e,0):i(n,e)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(7).f,o=n(2),i=n(1)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(44),o=n(29);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(22);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(10),o=n(70),i=n(29),c=n(71),u=n(41),f=n(17)("IE_PROTO"),a=function(){},s=function(){var t,e=u("iframe"),n=i.length;for(e.style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;n--;)delete s.prototype[i[n]];return s()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[f]=t):n=s(),void 0===e?n:o(n,e)},n(18)[f]=!0},function(t,e,n){"use strict";var r=n(9),o=n(73),i=n(36),c=n(16),u=n(51),f=c.set,a=c.getterFor("Array Iterator");t.exports=u(Array,"Array",function(t,e){f(this,{type:"Array Iterator",target:r(t),index:0,kind:e})},function(){var t=a(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(t,e){t.exports={}},function(t,e,n){var r=n(2),o=n(38),i=n(17)("IE_PROTO"),c=n(53),u=Object.prototype;t.exports=c?Object.getPrototypeOf:function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,e,n){var r=n(23);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(0),o=n(2),i=n(8),c=n(13),u=n(4),f=n(15),a=n(18),s=n(3),l=n(12),p=n(31),d=n(25),y=n(1),v=n(47),h=n(48),b=n(69),g=n(33),m=n(10),O=n(5),w=n(9),x=n(14),S=n(11),j=n(34),_=n(72),P=n(20),E=n(7),A=n(21),I=n(6),T=n(32),k=n(17)("hidden"),D=n(16),M=D.set,L=D.getterFor("Symbol"),R=P.f,H=E.f,C=_.f,N=r.Symbol,F=r.JSON,G=F&&F.stringify,U=y("toPrimitive"),q=A.f,V=l("symbol-registry"),z=l("symbols"),B=l("op-symbols"),W=l("wks"),J=Object.prototype,Y=r.QObject,X=n(46),$=!Y||!Y.prototype||!Y.prototype.findChild,K=i&&s(function(){return 7!=j(H({},"a",{get:function(){return H(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=R(J,e);r&&delete J[e],H(t,e,n),r&&t!==J&&H(J,e,r)}:H,Q=function(t,e){var n=z[t]=j(N.prototype);return M(n,{type:"Symbol",tag:t,description:e}),i||(n.description=e),n},Z=X&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof N},tt=function(t,e,n){return t===J&&tt(B,e,n),m(t),e=x(e,!0),m(n),o(z,e)?(n.enumerable?(o(t,k)&&t[k][e]&&(t[k][e]=!1),n=j(n,{enumerable:S(0,!1)})):(o(t,k)||H(t,k,S(1,{})),t[k][e]=!0),K(t,e,n)):H(t,e,n)},et=function(t,e){m(t);for(var n,r=b(e=w(e)),o=0,i=r.length;i>o;)tt(t,n=r[o++],e[n]);return t},nt=function(t){var e=q.call(this,t=x(t,!0));return!(this===J&&o(z,t)&&!o(B,t))&&(!(e||!o(this,t)||!o(z,t)||o(this,k)&&this[k][t])||e)},rt=function(t,e){if(t=w(t),e=x(e,!0),t!==J||!o(z,e)||o(B,e)){var n=R(t,e);return!n||!o(z,e)||o(t,k)&&t[k][e]||(n.enumerable=!0),n}},ot=function(t){for(var e,n=C(w(t)),r=[],i=0;n.length>i;)o(z,e=n[i++])||o(a,e)||r.push(e);return r},it=function(t){for(var e,n=t===J,r=C(n?B:w(t)),i=[],c=0;r.length>c;)!o(z,e=r[c++])||n&&!o(J,e)||i.push(z[e]);return i};X||(f((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor");var t=void 0===arguments[0]?void 0:String(arguments[0]),e=d(t),n=function(t){this===J&&n.call(B,t),o(this,k)&&o(this[k],e)&&(this[k][e]=!1),K(this,e,S(1,t))};return i&&$&&K(J,e,{configurable:!0,set:n}),Q(e,t)}).prototype,"toString",function(){return L(this).tag}),A.f=nt,E.f=tt,P.f=rt,n(26).f=_.f=ot,n(30).f=it,i&&(H(N.prototype,"description",{configurable:!0,get:function(){return L(this).description}}),c||f(J,"propertyIsEnumerable",nt,{unsafe:!0})),v.f=function(t){return Q(y(t),t)}),u({global:!0,wrap:!0,forced:!X,sham:!X},{Symbol:N});for(var ct=T(W),ut=0;ct.length>ut;)h(ct[ut++]);u({target:"Symbol",stat:!0,forced:!X},{for:function(t){return o(V,t+="")?V[t]:V[t]=N(t)},keyFor:function(t){if(!Z(t))throw TypeError(t+" is not a symbol");for(var e in V)if(V[e]===t)return e},useSetter:function(){$=!0},useSimple:function(){$=!1}}),u({target:"Object",stat:!0,forced:!X,sham:!i},{create:function(t,e){return void 0===e?j(t):et(j(t),e)},defineProperty:tt,defineProperties:et,getOwnPropertyDescriptor:rt}),u({target:"Object",stat:!0,forced:!X},{getOwnPropertyNames:ot,getOwnPropertySymbols:it}),F&&u({target:"JSON",stat:!0,forced:!X||s(function(){var t=N();return"[null]"!=G([t])||"{}"!=G({a:t})||"{}"!=G(Object(t))})},{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(O(e)||void 0!==t)&&!Z(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!Z(e))return e}),r[1]=e,G.apply(F,r)}}),N.prototype[U]||I(N.prototype,U,N.prototype.valueOf),p(N,"Symbol"),a[k]=!0},function(t,e,n){t.exports=!n(8)&&!n(3)(function(){return 7!=Object.defineProperty(n(41)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(5),o=n(0).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){t.exports=n(12)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(2),o=n(66),i=n(20),c=n(7);t.exports=function(t,e){for(var n=o(e),u=c.f,f=i.f,a=0;a<n.length;a++){var s=n[a];r(t,s)||u(t,s,f(e,s))}}},function(t,e,n){var r=n(2),o=n(9),i=n(45)(!1),c=n(18);t.exports=function(t,e){var n,u=o(t),f=0,a=[];for(n in u)!r(c,n)&&r(u,n)&&a.push(n);for(;e.length>f;)r(u,n=e[f++])&&(~i(a,n)||a.push(n));return a}},function(t,e,n){var r=n(9),o=n(27),i=n(28);t.exports=function(t){return function(e,n,c){var u,f=r(e),a=o(f.length),s=i(c,a);if(t&&n!=n){for(;a>s;)if((u=f[s++])!=u)return!0}else for(;a>s;s++)if((t||s in f)&&f[s]===n)return t||s||0;return!t&&-1}}},function(t,e,n){t.exports=!n(3)(function(){String(Symbol())})},function(t,e,n){e.f=n(1)},function(t,e,n){var r=n(68),o=n(2),i=n(47),c=n(7).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||c(e,t,{value:i.f(t)})}},function(t,e,n){"use strict";var r=n(8),o=n(2),i=n(5),c=n(7).f,u=n(43),f=n(0).Symbol;if(r&&"function"==typeof f&&(!("description"in f.prototype)||void 0!==f().description)){var a={},s=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof s?new f(t):void 0===t?f():f(t);return""===t&&(a[e]=!0),e};u(s,f);var l=s.prototype=f.prototype;l.constructor=s;var p=l.toString,d="Symbol(test)"==String(f("test")),y=/^Symbol\((.*)\)[^)]+$/;c(l,"description",{configurable:!0,get:function(){var t=i(this)?this.valueOf():this,e=p.call(t);if(o(a,t))return"";var n=d?e.slice(7,-1):e.replace(y,"$1");return""===n?void 0:n}}),n(4)({global:!0,forced:!0},{Symbol:s})}},function(t,e,n){n(48)("iterator")},function(t,e,n){"use strict";var r=n(4),o=n(74),i=n(37),c=n(54),u=n(31),f=n(6),a=n(15),s=n(13),l=n(1)("iterator"),p=n(36),d=n(52),y=d.IteratorPrototype,v=d.BUGGY_SAFARI_ITERATORS,h=function(){return this};t.exports=function(t,e,n,d,b,g,m){o(n,e,d);var O,w,x,S=function(t){if(t===b&&A)return A;if(!v&&t in P)return P[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},j=e+" Iterator",_=!1,P=t.prototype,E=P[l]||P["@@iterator"]||b&&P[b],A=!v&&E||S(b),I="Array"==e&&P.entries||E;if(I&&(O=i(I.call(new t)),y!==Object.prototype&&O.next&&(s||i(O)===y||(c?c(O,y):"function"!=typeof O[l]&&f(O,l,h)),u(O,j,!0,!0),s&&(p[j]=h))),"values"==b&&E&&"values"!==E.name&&(_=!0,A=function(){return E.call(this)}),s&&!m||P[l]===A||f(P,l,A),p[e]=A,b)if(w={values:S("values"),keys:g?A:S("keys"),entries:S("entries")},m)for(x in w)!v&&!_&&x in P||a(P,x,w[x]);else r({target:e,proto:!0,forced:v||_},w);return w}},function(t,e,n){"use strict";var r,o,i,c=n(37),u=n(6),f=n(2),a=n(13),s=n(1)("iterator"),l=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):l=!0),null==r&&(r={}),a||f(r,s)||u(r,s,function(){return this}),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:l}},function(t,e,n){t.exports=!n(3)(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})},function(t,e,n){var r=n(75);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n,o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},function(t,e,n){var r=n(38),o=n(37),i=n(53),c=n(3)(function(){o(1)});n(4)({target:"Object",stat:!0,forced:c,sham:!i},{getPrototypeOf:function(t){return o(r(t))}})},function(t,e,n){n(4)({target:"Object",stat:!0},{setPrototypeOf:n(54)})},function(t,e,n){var r=n(76),o=Object.prototype;r!==o.toString&&n(15)(o,"toString",r,{unsafe:!0})},function(t,e,n){"use strict";var r=n(78),o=n(16),i=n(51),c=o.set,u=o.getterFor("String Iterator");i(String,"String",function(t){c(this,{type:"String Iterator",string:String(t),index:0})},function(){var t,e=u(this),n=e.string,o=e.index;return o>=n.length?{value:void 0,done:!0}:(t=r(n,o,!0),e.index+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(79),o=n(35),i=n(0),c=n(6),u=n(1),f=u("iterator"),a=u("toStringTag"),s=o.values;for(var l in r){var p=i[l],d=p&&p.prototype;if(d){if(d[f]!==s)try{c(d,f,s)}catch(t){d[f]=s}if(d[a]||c(d,a,l),r[l])for(var y in o)if(d[y]!==o[y])try{c(d,y,o[y])}catch(t){d[y]=o[y]}}}},function(t,e,n){var r=n(8);n(4)({target:"Object",stat:!0,forced:!r,sham:!r},{defineProperty:n(7).f})},function(t,e,n){"use strict";var r=n(14),o=n(7),i=n(11);t.exports=function(t,e,n){var c=r(e);c in t?o.f(t,c,i(0,n)):t[c]=n}},function(t,e,n){var r=n(3),o=n(1)("species");t.exports=function(t){return!r(function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo})}},function(t,e,n){t.exports=n(85)},function(t,e,n){var r=n(3),o=n(22),i="".split;t.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(42),o=n(0).WeakMap;t.exports="function"==typeof o&&/native code/.test(r.call(o))},function(t,e,n){var r=n(26),o=n(30),i=n(10),c=n(0).Reflect;t.exports=c&&c.ownKeys||function(t){var e=r.f(i(t)),n=o.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(3),o=/#|\.prototype\./,i=function(t,e){var n=u[c(t)];return n==a||n!=f&&("function"==typeof e?r(e):!!e)},c=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},f=i.NATIVE="N",a=i.POLYFILL="P";t.exports=i},function(t,e,n){t.exports=n(0)},function(t,e,n){var r=n(32),o=n(30),i=n(21);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var c,u=n(t),f=i.f,a=0;u.length>a;)f.call(t,c=u[a++])&&e.push(c);return e}},function(t,e,n){var r=n(8),o=n(7),i=n(10),c=n(32);t.exports=r?Object.defineProperties:function(t,e){i(t);for(var n,r=c(e),u=r.length,f=0;u>f;)o.f(t,n=r[f++],e[n]);return t}},function(t,e,n){var r=n(0).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(9),o=n(26).f,i={}.toString,c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return c&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return c.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(1)("unscopables"),o=n(34),i=n(6),c=Array.prototype;null==c[r]&&i(c,r,o(null)),t.exports=function(t){c[r][t]=!0}},function(t,e,n){"use strict";var r=n(52).IteratorPrototype,o=n(34),i=n(11),c=n(31),u=n(36),f=function(){return this};t.exports=function(t,e,n){var a=e+" Iterator";return t.prototype=o(r,{next:i(1,n)}),c(t,a,!1,!0),u[a]=f,t}},function(t,e,n){var r=n(5),o=n(10);t.exports=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype")}},function(t,e,n){"use strict";var r=n(77),o={};o[n(1)("toStringTag")]="z",t.exports="[object z]"!==String(o)?function(){return"[object "+r(this)+"]"}:o.toString},function(t,e,n){var r=n(22),o=n(1)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(c=r(e))&&"function"==typeof e.callee?"Arguments":c}},function(t,e,n){var r=n(19),o=n(23);t.exports=function(t,e,n){var i,c,u=String(o(t)),f=r(e),a=u.length;return f<0||f>=a?n?"":void 0:(i=u.charCodeAt(f))<55296||i>56319||f+1===a||(c=u.charCodeAt(f+1))<56320||c>57343?n?u.charAt(f):i:n?u.slice(f,f+2):c-56320+(i-55296<<10)+65536}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){"use strict";var r=n(45)(!1),o=[].indexOf,i=!!o&&1/[1].indexOf(1,-0)<0,c=n(81)("indexOf");n(4)({target:"Array",proto:!0,forced:i||c},{indexOf:function(t){return i?o.apply(this,arguments)||0:r(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(3);t.exports=function(t,e){var n=[][t];return!n||!r(function(){n.call(null,e||function(){throw Error()},1)})}},function(t,e,n){"use strict";var r=n(5),o=n(33),i=n(28),c=n(27),u=n(9),f=n(61),a=n(1)("species"),s=[].slice,l=Math.max,p=n(62)("slice");n(4)({target:"Array",proto:!0,forced:!p},{slice:function(t,e){var n,p,d,y=u(this),v=c(y.length),h=i(t,v),b=i(void 0===e?v:e,v);if(o(y)&&("function"!=typeof(n=y.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[a])&&(n=void 0):n=void 0,n===Array||void 0===n))return s.call(y,h,b);for(p=new(void 0===n?Array:n)(l(b-h,0)),d=0;h<b;h++,d++)h in y&&f(p,d,y[h]);return p.length=d,p}})},function(t,e,n){"use strict";var r=n(28),o=n(19),i=n(27),c=n(38),u=n(84),f=n(61),a=Math.max,s=Math.min,l=n(62)("splice");n(4)({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var n,l,p,d,y,v,h=c(this),b=i(h.length),g=r(t,b),m=arguments.length;if(0===m?n=l=0:1===m?(n=0,l=b-g):(n=m-2,l=s(a(o(e),0),b-g)),b+n-l>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(p=u(h,l),d=0;d<l;d++)(y=g+d)in h&&f(p,d,h[y]);if(p.length=l,n<l){for(d=g;d<b-l;d++)v=d+n,(y=d+l)in h?h[v]=h[y]:delete h[v];for(d=b;d>b-l+n;d--)delete h[d-1]}else if(n>l)for(d=b-l;d>g;d--)v=d+n-1,(y=d+l-1)in h?h[v]=h[y]:delete h[v];for(d=0;d<n;d++)h[d+g]=arguments[d+2];return h.length=b-l+n,p}})},function(t,e,n){var r=n(5),o=n(33),i=n(1)("species");t.exports=function(t,e){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},function(t,e,n){"use strict";n.r(e);n(39),n(49),n(50),n(35),n(55),n(56),n(57),n(58),n(59),n(60),n(80),n(82),n(83);function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o;return e=t,(n=[{key:"addEventListener",value:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}},{key:"hasEventListener",value:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}},{key:"removeEventListener",value:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}}},{key:"dispatchEvent",value:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),r=0,o=n.length;r<o;r++)n[r].call(this,t)}}}}])&&r(e.prototype,n),o&&r(e,o),t}();function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var l=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,(n=!(o=u(e).call(this))||"object"!==i(o)&&"function"!=typeof o?f(r):o).isReveal=!0,n.options=t,n.setId(f(n)),n}var n,r,s;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(e,o),n=e,(r=[{key:"setId",value:function(t){t.id=e.ID,e.ID++,e.Instances.push(t)}}])&&c(n.prototype,r),s&&c(n,s),e}();s(l,"Instances",[]),s(l,"ID",0);var p=l;function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var b=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,(n=!(o=y(e).call(this))||"object"!==d(o)&&"function"!=typeof o?v(r):o).targets=document.querySelectorAll(t),console.log(v(n)),n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(e,p),e}();n.d(e,"Agent",function(){return b})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,